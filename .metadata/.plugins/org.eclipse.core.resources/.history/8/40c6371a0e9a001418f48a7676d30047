#include <stdio.h>
#include <conio.h>
#define max 200

typedef int songuyen[max];

void daonguoc(songuyen &a) // Đảo ngược
{
	int n = 0;
	while (a[n] >= 0)
		n++;
	for (int k = 0; k < n / 2; k++)
	{
		int t = a[k];
		a[k] = a[n - 1 - k];
		a[n - 1 - k] = t;
	}
}

void xoakhongcuoi(songuyen &a) //Xoá các chữ số 0 ở cuối sau khi đã đảo ngược
{
	int n = 0;
	while (a[n] >= 0)
		n++;
	if (a[n - 1] > 0 || n == 1)
		return;
	int p = n;
	while (p && a[p - 1] == 0)
		p--;
	if (p == 0)
		p++;
	a[p] = -1;
	a[p + 1] = a[n + 1];
	a[p + 2] = a[n + 2];
}

void hienthi(songuyen a, char *s = "\n") //Hiển thị số
{
	int n = 0;
	while (a[n] >= 0)
		n++;
	if (a[n + 1] == -1)
		printf("%c", '-');
	while (n)
	{
		printf("%c", a[n - 1] + '0');
		n--;
	}
	printf("%s", s);

}

void nhapsn(songuyen &a, char ten) // Nhập số nguyên lớn
{
	printf("\nMoi ban nhap so nguyen %c: ", ten);
	int n = 0, sign = 0;
	char ch;
	do
	{
		ch = getch();
		if (ch == '-' && n == 0 && !sign)
		{
			sign = 1;
			printf("%c", ch);
		}
		else if ('0' <= ch && ch <= '9')
		{
			a[n++] = ch - '0';
			printf("%c", ch);
		}
		else if (ch == '\b' && n >= 0)
		{
			printf("%c%c%c", ch, 32, ch);
			if (n)
				n--;
			if (n == 0)
				sign = 0;
		}
	} while (ch != '\r' || n == 0);
	printf("\n");

	a[n++] = -1;
	if (sign)
		a[n++] = -1;
	a[n++] = 0;
	daonguoc(a);
	xoakhongcuoi(a);
}

int sosanh(const songuyen a, const songuyen b, int p = 0) //So sánh
{
	int aj = 0, bj = 0;
	while (a[aj++] != -1)
		;
	while (b[bj++] != -1)
		;
	if (aj - p > bj)
		return 1;
	if (aj - p < bj)
		return -1;
	while (bj && a[p + bj] == b[bj])
		bj--;
	return a[p + bj] - b[bj];
}

int congchuso(int a, int b, int &carry)  // Cộng hai chữ số
{
	int temp = a + b + carry;
	carry = temp / 10;
	return temp % 10;
}

void cong(const songuyen a, const songuyen b, songuyen &c, int p = 0) // Cộng số lớn
{
	int i, carry = 0;
	for (i = 0; i < p; i++)
		c[i] = a[i];
	i = 0;
	while (a[i + p] != -1 && b[i] != -1)
		c[p + i++] = congchuso(a[p + i], b[i], carry);
	if (a[i + p] != -1)
		while (a[i + p] != -1)
			c[p + i++] = congchuso(a[p + i], 0, carry);
	else
		while (b[i] != -1)
			c[p + i++] = congchuso(b[i], 0, carry);
	if (carry)
		c[p + i++] = carry;
	c[p + i] = -1;
	c[p + i + 1] = 0;
}

int truchuso(int a, int b, int &carry) // Trừ hai chữ số
{
	int temp = 10 + a - b - carry;
	carry = 1 - temp / 10;
	return temp % 10;
}

void tru(const songuyen a, const songuyen b, songuyen &c, int p = 0) //Trừ số lớn
{
	int i, carry = 0;
	for (i = 0; i < p; i++)
		c[i] = a[i];
	i = 0;
	while (a[p + i] != -1 && b[i] != -1)
		c[p + i++] = truchuso(a[p + i], b[i], carry);
	while (a[p + i] != -1)
		c[p + i++] = truchuso(a[p + i], 0, carry);
	c[p + i++] = -1;
	c[p + i++] = 0;
	xoakhongcuoi(c);
}

int nhanchuso(int a, int b, int &carry) //Nhân 2 chữ số
{
	int temp = a * b + carry;
	carry = temp / 10;
	return temp % 10;
}

void saochep(songuyen &b, const songuyen a) //Sao chép
{
	int n = 0;
	while (a[n] != -1)
		b[n] = a[n++];
	while (a[n] == -1)
		b[n] = a[n++];
	b[n] = 0;
}

void nhan(const songuyen a, const songuyen b, songuyen &c)  //Nhân hai số lớn
{
	int jb = 0;
	songuyen temp;
	do
	{
		int ja = 0, carry = 0;
		do
		{
			temp[ja++] = nhanchuso(a[ja], b[jb], carry);
		} while (a[ja] != -1);

		if (carry)
			temp[ja++] = carry;
		temp[ja] = -1;
		temp[ja + 1] = 0;
		if (jb == 0)
			saochep(c, temp);
		else
			cong(c, temp, c, jb);
		jb++;

	} while (b[jb] != -1);
}

void chia(const songuyen a, const songuyen b, songuyen &c, songuyen &r) //Chia hai số lớn
{
	int ja = 0, jb = 0, k = 0;
	while (a[ja] != -1)
		ja++;
	while (b[jb] != -1)
		jb++;
	songuyen temp;
	saochep(temp, a);
	int jt = ja - jb;
	do
	{
		c[k] = 0;
		while (sosanh(temp, b, jt) >= 0)
		{
			c[k]++;
			tru(temp, b, r, jt);
			saochep(temp, r);
		}
		jt--;
		k++;
	} while (jt >= 0);
	c[k] = -1;
	c[k + 1] = 0;
	daonguoc(c);
	xoakhongcuoi(c);
}

int main()
{
	songuyen a, b, c, r;
	nhapsn(a, 'a');
	nhapsn(b, 'b');
	cong(a, b, c);
	hienthi(a, " + ");
	hienthi(b, " = ");
	hienthi(c);
	tru(a, b, c);
	hienthi(a, " - ");
	hienthi(b, " = ");
	hienthi(c);
	nhan(a, b, c);
	hienthi(a, " * ");
	hienthi(b, " = ");
	hienthi(c);
	chia(a, b, c, r);
	hienthi(a, " / ");
	hienthi(b, " = ");
	hienthi(c, " du ");
	hienthi(r);
	return 0;
}
